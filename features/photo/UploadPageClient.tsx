'use client';

import { useMemo } from 'react';

import AdminChildPage from '../admin/AdminChildPage';
import type { AiAutoGeneratedField } from './ai';
import AiButton from './ai/AiButton';
import { generateTakenAtFields } from './form';
import PhotoForm from './form/PhotoForm';
import usePhotoFormParent from './form/usePhotoFormParent';
import type { TagsWithMeta } from './tag';

import type { PhotoFormData } from '@/types/photo';
import { PATH_ADMIN_UPLOADS } from '@/config/site-paths';

export default function UploadPageClient({
  blobId,
  photoFormExif,
  uniqueTags,
  hasAiTextGeneration,
  textFieldsToAutoGenerate,
  imageThumbnailBase64,
}: {
  blobId?: string;
  photoFormExif: Partial<PhotoFormData>;
  uniqueTags: TagsWithMeta;
  hasAiTextGeneration?: boolean;
  textFieldsToAutoGenerate?: AiAutoGeneratedField[];
  imageThumbnailBase64?: string;
}) {
  const {
    pending,
    setIsPending,
    updatedTitle,
    setUpdatedTitle,
    hasTextContent,
    setHasTextContent,
    aiContent,
  } = usePhotoFormParent({
    textFieldsToAutoGenerate,
    imageThumbnailBase64,
  });

  const initialPhotoForm = useMemo(
    () => ({
      ...photoFormExif,
      // Generate missing dates on client to avoid timezone issues
      ...generateTakenAtFields(photoFormExif),
    }),
    [photoFormExif]
  );

  return (
    <AdminChildPage
      backPath={PATH_ADMIN_UPLOADS}
      backLabel="Uploads"
      breadcrumb={pending && updatedTitle ? updatedTitle : blobId}
      breadcrumbEllipsis
      accessory={
        hasAiTextGeneration && (
          <AiButton {...{ aiContent, shouldConfirm: hasTextContent }} />
        )
      }
      isLoading={pending}
    >
      <PhotoForm
        initialPhotoForm={initialPhotoForm}
        uniqueTags={uniqueTags}
        aiContent={hasAiTextGeneration ? aiContent : undefined}
        onTitleChange={setUpdatedTitle}
        onTextContentChange={setHasTextContent}
        onFormStatusChange={setIsPending}
      />
    </AdminChildPage>
  );
}
